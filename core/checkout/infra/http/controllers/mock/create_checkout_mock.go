// Code generated by MockGen. DO NOT EDIT.
// Source: core/checkout/domain/use_case.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/guil95/grpcApi/core/checkout/domain"
)

// MockCreateCheckoutUseCase is a mock of CreateCheckoutUseCase interface.
type MockCreateCheckoutUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateCheckoutUseCaseMockRecorder
}

// MockCreateCheckoutUseCaseMockRecorder is the mock recorder for MockCreateCheckoutUseCase.
type MockCreateCheckoutUseCaseMockRecorder struct {
	mock *MockCreateCheckoutUseCase
}

// NewMockCreateCheckoutUseCase creates a new mock instance.
func NewMockCreateCheckoutUseCase(ctrl *gomock.Controller) *MockCreateCheckoutUseCase {
	mock := &MockCreateCheckoutUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateCheckoutUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateCheckoutUseCase) EXPECT() *MockCreateCheckoutUseCaseMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *MockCreateCheckoutUseCase) Checkout(chart *domain.Chart) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", chart)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkout indicates an expected call of Checkout.
func (mr *MockCreateCheckoutUseCaseMockRecorder) Checkout(chart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockCreateCheckoutUseCase)(nil).Checkout), chart)
}
