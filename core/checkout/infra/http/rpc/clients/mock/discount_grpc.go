// Code generated by MockGen. DO NOT EDIT.
// Source: core/discount/discount_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	discount "github.com/guil95/grpcApi/core/discount"
	grpc "google.golang.org/grpc"
)

// MockDiscountClient is a mock of DiscountClient interface.
type MockDiscountClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscountClientMockRecorder
}

// MockDiscountClientMockRecorder is the mock recorder for MockDiscountClient.
type MockDiscountClientMockRecorder struct {
	mock *MockDiscountClient
}

// NewMockDiscountClient creates a new mock instance.
func NewMockDiscountClient(ctrl *gomock.Controller) *MockDiscountClient {
	mock := &MockDiscountClient{ctrl: ctrl}
	mock.recorder = &MockDiscountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscountClient) EXPECT() *MockDiscountClientMockRecorder {
	return m.recorder
}

// GetDiscount mocks base method.
func (m *MockDiscountClient) GetDiscount(ctx context.Context, in *discount.GetDiscountRequest, opts ...grpc.CallOption) (*discount.GetDiscountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiscount", varargs...)
	ret0, _ := ret[0].(*discount.GetDiscountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscount indicates an expected call of GetDiscount.
func (mr *MockDiscountClientMockRecorder) GetDiscount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscount", reflect.TypeOf((*MockDiscountClient)(nil).GetDiscount), varargs...)
}

// MockDiscountServer is a mock of DiscountServer interface.
type MockDiscountServer struct {
	ctrl     *gomock.Controller
	recorder *MockDiscountServerMockRecorder
}

// MockDiscountServerMockRecorder is the mock recorder for MockDiscountServer.
type MockDiscountServerMockRecorder struct {
	mock *MockDiscountServer
}

// NewMockDiscountServer creates a new mock instance.
func NewMockDiscountServer(ctrl *gomock.Controller) *MockDiscountServer {
	mock := &MockDiscountServer{ctrl: ctrl}
	mock.recorder = &MockDiscountServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscountServer) EXPECT() *MockDiscountServerMockRecorder {
	return m.recorder
}

// GetDiscount mocks base method.
func (m *MockDiscountServer) GetDiscount(arg0 context.Context, arg1 *discount.GetDiscountRequest) (*discount.GetDiscountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscount", arg0, arg1)
	ret0, _ := ret[0].(*discount.GetDiscountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscount indicates an expected call of GetDiscount.
func (mr *MockDiscountServerMockRecorder) GetDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscount", reflect.TypeOf((*MockDiscountServer)(nil).GetDiscount), arg0, arg1)
}

// mustEmbedUnimplementedDiscountServer mocks base method.
func (m *MockDiscountServer) mustEmbedUnimplementedDiscountServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDiscountServer")
}

// mustEmbedUnimplementedDiscountServer indicates an expected call of mustEmbedUnimplementedDiscountServer.
func (mr *MockDiscountServerMockRecorder) mustEmbedUnimplementedDiscountServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDiscountServer", reflect.TypeOf((*MockDiscountServer)(nil).mustEmbedUnimplementedDiscountServer))
}

// MockUnsafeDiscountServer is a mock of UnsafeDiscountServer interface.
type MockUnsafeDiscountServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDiscountServerMockRecorder
}

// MockUnsafeDiscountServerMockRecorder is the mock recorder for MockUnsafeDiscountServer.
type MockUnsafeDiscountServerMockRecorder struct {
	mock *MockUnsafeDiscountServer
}

// NewMockUnsafeDiscountServer creates a new mock instance.
func NewMockUnsafeDiscountServer(ctrl *gomock.Controller) *MockUnsafeDiscountServer {
	mock := &MockUnsafeDiscountServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDiscountServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDiscountServer) EXPECT() *MockUnsafeDiscountServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDiscountServer mocks base method.
func (m *MockUnsafeDiscountServer) mustEmbedUnimplementedDiscountServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDiscountServer")
}

// mustEmbedUnimplementedDiscountServer indicates an expected call of mustEmbedUnimplementedDiscountServer.
func (mr *MockUnsafeDiscountServerMockRecorder) mustEmbedUnimplementedDiscountServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDiscountServer", reflect.TypeOf((*MockUnsafeDiscountServer)(nil).mustEmbedUnimplementedDiscountServer))
}
